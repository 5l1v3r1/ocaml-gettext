##########################################################################
#  Ocaml-gettext : a library to translate messages                       #
#                                                                        #
#  Copyright (C) 2001 Jean-Christophe FILLIATRE                          #
#  Copyright (C) 2003, 2004, 2005 Sylvain Le Gall <sylvain@le-gall.net>  #
#                                                                        #
#  This library is free software; you can redistribute it and/or         #
#  modify it under the terms of the GNU Lesser General Public            #
#  License as published by the Free Software Foundation; either          #
#  version 2.1 of the License, or (at your option) any later version;    #
#  with the OCaml static compilation exception.                          #
#                                                                        #
#  This library is distributed in the hope that it will be useful,       #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     #
#  Lesser General Public License for more details.                       #
#                                                                        #
#  You should have received a copy of the GNU Lesser General Public      #
#  License along with this library; if not, write to the Free Software   #
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307   #
#  USA                                                                   #
#                                                                        #
#  Contact: sylvain@le-gall.net                                          #
##########################################################################

# destination dir
DOCHTML=$(DOCDIR)/html
DOCODOC=$(DOCHTML)
DOCPDF =$(DOCDIR)

# programs flags
FOPFLAGS      = 
XSLTPROCFLAGS = --xinclude
XMLLINTFLAGS  = --xinclude --noent --noout --postvalid
OCAMLDOCFLAGS = 

ifdef REQUIRES
CLI_REQUIRES = -package "$(REQUIRES)"
endif

ifdef PREDICATES
CLI_PREDICATES = -predicates "$(PREDICATES)"
endif

ifdef SYNTAX 
CLI_SYNTAX = -syntax $(SYNTAX)
endif

CLI_OCAMLFIND = $(CLI_REQUIRES) $(CLI_PREDICATES) $(CLI_SYNTAX)

BUILDLIB  = $(BUILDDIR)/lib
BUILDBIN  = $(BUILDDIR)/bin
BUILDDOC  = $(BUILDDIR)/share/doc
BUILDHTML = $(BUILDDOC)/html
BUILDMAN  = $(BUILDDIR)/share/man
BUILDODOC = $(BUILDHTML)/api
BUILDPDF  = $(BUILDDOC)
BUILDPO   = $(BUILDDIR)/share/locale

OCAMLPATH:=$(BUILDLIB)/:$(OCAMLPATH)
export OCAMLPATH

all: $(STUBSLIB) $(if $(NAME),all-$(OCAMLBEST))
all-byte: $(if $(LIBRARY), install-buildlib-byte, install-buildprog-byte)
all-opt:  $(if $(LIBRARY), install-buildlib-opt, install-buildprog-opt)
all: install-builddoc-html 
all: install-builddoc-man
all: install-builddoc-odoc
all: install-builddoc-pdf

install: all $(if $(NAME),install-$(OCAMLBEST))
install-byte: $(if $(LIBRARY), install-lib-byte, install-prog-byte)
install-opt:  $(if $(LIBRARY), install-lib-opt, install-prog-byte)
install: install-doc-html 
install: install-doc-man
install: install-doc-odoc
install: install-doc-pdf

uninstall: $(if $(LIBRARY), uninstall-lib, uninstall-prog)
uninstall: uninstall-doc-html 
uninstall: uninstall-doc-man
uninstall: uninstall-doc-odoc
uninstall: uninstall-doc-pdf


clean:: $(if $(LIBRARY), clean-lib, clean-prog)
clean:: clean-doc-odoc
clean:: clean-doc-pdf
clean:: clean-doc-html 
clean:: clean-doc-man
	$(RM) -r $(BUILDHTML) $(BUILDMAN) $(BUILDPDF) $(BUILDODOC)

distclean::

CMX = $(patsubst dll%.so, lib%.a, $(CMO:.cmo=.cmx))


# Build the lib

%.cmxa %.a %.so:
	$(if $(STUBSOBJS),                     \
	 $(OCAMLMKLIB)  -o $* $^ $(STUBSOBJS), \
	 $(OCAMLOPT) -a -o $*.cmxa $^          \
	)

%.cma %.a %.so:
	$(if $(STUBSOBJS),                     \
	 $(OCAMLMKLIB) -o $* $^ $(STUBSOBJS),  \
	 $(OCAMLC)  -a -o $*.cma $^            \
	)

$(BUILDLIB):
	mkdir -p $(BUILDLIB)

# BUG : need a serious rewrite 
install-buildlib-byte: REAL_INSTALLIB = $(filter-out %.cmx, $(filter-out %.cmxa,$(INSTALLIB)))
install-buildlib-byte: $(filter-out %.cmx, $(filter-out %.cmxa,$(INSTALLIB)))
install-buildlib-byte: install-buildlib-common

install-buildlib-opt: REAL_INSTALLIB =  $(INSTALLIB)
install-buildlib-opt: $(INSTALLIB)
install-buildlib-opt: install-buildlib-common

install-buildlib-common: $(BUILDLIB)
	-$(OCAMLFIND) remove -destdir $(BUILDLIB) $(NAME) 
	$(OCAMLFIND)  install -ldconf ignore -destdir $(BUILDLIB) $(NAME) $(REAL_INSTALLIB)

install-lib-byte: REAL_INSTALLIB = $(filter-out %.o,$(filter-out %.a,$(filter-out %.cmx, $(filter-out %.cmxa,$(INSTALLIB)))))
install-lib-byte: $(filter-out %.o,$(filter-out %.a,$(filter-out %.cmx, $(filter-out %.cmxa,$(INSTALLIB)))))
install-lib-byte: install-lib-common

install-lib-opt: REAL_INSTALLIB =  $(INSTALLIB)
install-lib-opt: $(INSTALLIB)
install-lib-opt: install-lib-common
	
install-lib-common:
	$(OCAMLFIND) install -destdir $(LIBDIR) $(NAME) $(REAL_INSTALLIB)

uninstall-lib:
	-$(OCAMLFIND) remove -destdir $(LIBDIR) $(NAME)

clean-lib:
	-$(OCAMLFIND) remove -destdir $(BUILDLIB) $(NAME)

# Build the executable

$(BUILDBIN): 
	mkdir -p $(BUILDBIN)

BLIBS = $(addsuffix .cma,$(LIBS))

install-buildprog-byte: $(BUILDBIN) $(CMO)
	$(OCAMLC) -o $(NAME) $(INCLUDES) -package "$(REQUIRES)" -linkpkg \
	-predicates "$(PREDICATES)" $(BLIBS) $(CMO)
	$(CP) $(NAME) $(BUILDBIN)

install-prog-byte: install-buildprog-byte
	$(CP) $(NAME) $(BINDIR)

OLIBS = $(addsuffix .cmxa,$(LIBS))

install-buildprog-opt: $(BUILDBIN) $(CMX)
	$(OCAMLOPT) -o $(NAME) $(INCLUDES) -package "$(REQUIRES)" -linkpkg \
	-predicates "$(PREDICATES)" $(OLIBS) $(CMX)
	$(CP) $(NAME) $(BUILDBIN)

install-prog-opt: install-buildprog-opt
	$(CP) $(NAME) $(BINDIR)

clean-prog:
	-$(RM) $(NAME)
	-$(RM) $(BUILDBIN)/$(NAME)

# Build PDF files

PDF_TARGET=$(patsubst %.xml,$(BUILDPDF)/%.pdf,$(1))
$(BUILDPDF)/%.pdf: %.fo
	$(MKDIR) -p $(dir $@)
	$(FOP) $(FOPFLAGS) -fo $^ -pdf $@

%.fo: %.xml
	$(XMLLINT) $(XMLLINTFLAGS) $^ 
	$(XSLTPROC) $(XSLTPROCFLAGS) -o $@ $(FOXSL) $^

install-builddoc-pdf: $(PDF_TARGETS)

clean-doc-pdf:
	-$(RM) $(PDF_TARGETS)

install-doc-pdf:
	$(CP) $(PDF_TARGETS) $(DOCPDF)

uninstall-doc-pdf:
	$(RM) $(foreach i,$(DOCPDF)/$(notdir $(i)),$(PDF_TARGETS))
	

# Build OCaml documentaiton

ODOC_TARGET=$(BUILDODOC)/$(1)/index.html
$(BUILDODOC)/%/index.html: 
	$(MKDIR) -p $(dir $@)
	EXTRAFLAGS=`$(OCAMLFIND) query -i-format -r $(REQUIRES)`; \
	$(OCAMLDOC) $(OCAMLDOCFLAGS) $$EXTRAFLAGS -d $(dir $@) -html $^

install-builddoc-odoc: $(ODOC_TARGETS)

clean-doc-odoc: 
	-$(RM) -r $(dir $(ODOC_TARGETS))

install-doc-odoc:
	$(CP) -r $(dir $(ODOC_TARGETS)) $(DOCODOC)

uninstall-doc-odoc: clean-doc-odoc
	-$(RM) -r $(foreach i,$(DOCODOC)/$(notdir $(dir $(i))),$(ODOC_TARGETS))

# Build HTML files

HTML_TARGET=$(patsubst %.xml,$(BUILDHTML)/%/index.html,$(1))
$(BUILDHTML)/%/index.html: %.xml
	$(XMLLINT) $(XMLLINTFLAGS) $^ 
	$(MKDIR) -p $(dir $@)
	$(XSLTPROC) $(XSLTPROCFLAGS) --stringparam base.dir "$(dir $@)" $(HTMLXSL) $^
	$(if $(IMAGES),$(CP) $(IMAGES) $(dir $@))

install-builddoc-html: $(HTML_TARGETS)

clean-doc-html: 
	-$(RM) -r $(dir $(HTML_TARGETS))
	
install-doc-html: install-builddoc-html
	$(CP) -r $(dir $(HTML_TARGETS)) $(DOCHTML)

uninstall-doc-html: clean-doc-html
	-$(RM) -r $(foreach i,$(DOCHTML)/$(notdir $(dir $(i))),$(DOC_TARGETS))

# Build MAN files

MAN_SECTION=man$(patsubst .%,%,$(suffix $(1)))
MAN_BUILD_TARGETS=$(BUILDMAN)/$(call MAN_SECTION,$(1))/$(1)
MAN_INSTALL_TARGETS=$(DOCMAN)/$(call MAN_SECTION,$(1))/$(1)

define PROCESS_MAN
	$(XMLLINT) $(XMLLINTFLAGS) $^
	$(XSLTPROC) $(XSLTPROCFLAGS) $(MANXSL) $^
	$(MKDIR) -p $(dir $(call MAN_BUILD_TARGETS,$@))
	$(CP) $@ $(call MAN_BUILD_TARGETS,$@) 
endef

%.1:
	$(PROCESS_MAN)
%.2:
	$(PROCESS_MAN)
%.3:
	$(PROCESS_MAN)
%.4:
	$(PROCESS_MAN)
%.5:
	$(PROCESS_MAN)
%.6:
	$(PROCESS_MAN)
%.7:
	$(PROCESS_MAN)
%.8:
	$(PROCESS_MAN)
%.9:
	$(PROCESS_MAN)
	
install-builddoc-man: $(MAN_TARGETS)

clean-doc-man:
	-$(RM) $(MAN_TARGETS) $(foreach i,$(MAN_TARGETS),$(call MAN_BUILD_TARGETS,$(i)))

install-doc-man: install-builddoc-man
	$(CP) -r $(BUILDMAN) $(MANDIR)

uninstall-doc-man: clean-doc-man
	-$(RM) $(foreach i,$(MAN_TARGETS),$(call MAN_INSTALL_TARGETS,$(i)))





# Extra files

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly .zog .idl .h .o

%.ml %.mli %.h %_stubs.c: %.idl
	$(CAMLIDL) -nocpp -no-include $<

.c.o:
	$(OCAMLC) $(INCLUDES) -c $<	

.mli.cmi:
	$(OCAMLC) $(INCLUDES) $(CLI_OCAMLFIND) -c $<

.ml.cmo:
	$(OCAMLC) $(INCLUDES) $(CLI_OCAMLFIND) -c $<

.ml.o:
	$(OCAMLOPT) $(INCLUDES) $(CLI_OCAMLFIND) -c $<
	
.ml.cmx:
	$(OCAMLOPT) $(INCLUDES) $(CLI_OCAMLFIND) -c $<
	
.mll.ml:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) -v $<

.mly.mli:
	$(OCAMLYACC) -v $<
	
.zog.ml:
	$(OCAMLP4) pa_o.cmo pa_zog.cma  pr_o.cmo -impl $< > $@
	
clean:: $(if $(LIBRARY),clean-lib,clean-prog)
	-$(RM) *.cm[ioxa] *.o *.cmxa *.a *.so
	-$(RM) $(GENERATED) *.output

distclean:: clean
