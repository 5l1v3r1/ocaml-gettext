<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!-- Source code -->
<!--
<!ENTITY po-makefile 'Not included' >
<!ENTITY LINGUAS     'Not included' >
<!ENTITY POTFILES    'Not included' >
<!ENTITY makefile    'Not included' >
<!ENTITY library-ml  'Not included' >
<!ENTITY program-ml  'Not included' >
-->

<!ENTITY po-makefile         '<xi:include href="XXX" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>' >
<!ENTITY LINGUAS             '<xi:include href="XXX" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>' >
<!ENTITY POTFILES            '<xi:include href="XXX" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>' >
<!ENTITY makefile            '<xi:include href="XXX" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>' >
<!ENTITY library-ml          '<xi:include href="XXX" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>' >
<!ENTITY library-gettext-ml  '<xi:include href="XXX" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>' >
<!ENTITY program-ml          '<xi:include href="XXX" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>' >
<!ENTITY program-gettext-ml  '<xi:include href="XXX" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>' >

<!-- Links -->
<!ENTITY download-ocaml             'http://caml.inria.fr/ocaml/release.en.html'>
<!ENTITY site-ocaml                 'http://caml.inria.fr/'>
<!ENTITY download-gettext           'http://www.gnu.org/software/gettext/gettext.html#TOCdownloading'>
<!ENTITY site-gettext               'http://www.gnu.org/software/gettext/gettext.html'>
<!ENTITY site-documentation-gettext 'http://www.gnu.org/software/gettext/manual/gettext.html'>
<!ENTITY download-camomile          'http://prdownloads.sourceforge.net/camomile/'>
<!ENTITY site-camomile              'http://camomile.sourceforge.net/'>
<!ENTITY download-ocaml-fileutils   'http://www.gallu.homelinux.org/download/'>
<!ENTITY site-ocaml-fileutils       'http://www.gallu.homelinux.org/ocaml-fileutils.html'>
<!ENTITY download-ounit             'http://www.xs4all.nl/~mmzeeman/ocaml/'>
<!ENTITY site-ounit                 'http://www.xs4all.nl/~mmzeeman/ocaml/'>
<!ENTITY download-ocaml-benchmark   'http://sourceforge.net/project/showfiles.php?group_id=117069'>
<!ENTITY site-ocaml-benchmark       'http://ocaml-benchmark.sourceforge.net/'>
<!ENTITY download-docbook           'http://prdownloads.sourceforge.net/docbook/'>
<!ENTITY site-docbook               'http://docbook.sourceforge.net/'>
<!ENTITY download-xsltproc          'http://xmlsoft.org/XSLT/downloads.html'>
<!ENTITY download-findlib           'http://www.ocaml-programming.de/packages/'>
<!ENTITY site-gtranslator           'http://gtranslator.sourceforge.net/'>
<!ENTITY site-kbabel                'http://i18n.kde.org/tools/kbabel/'>
  ]>
<book>
  <title>Ocaml-gettext reference manual</title>
  <bookinfo>
    <legalnotice>
      <para>
        This user manual is considered as a source code and is licensed under the GNU Library Public 
        License v2.1.
      </para>
    </legalnotice>
    <author>
      <firstname>Sylvain</firstname>
      <surname>Le Gall</surname>
    </author>
    <copyright>
      <year>2005</year>
      <holder>Sylvain Le Gall</holder>
    </copyright>
    <revhistory>
      <revision>
        <!-- BUG: to complete wiht the right tags -->
        <revnumber>svn:revision</revnumber>
        <date>svn:date</date>
      </revision>
    </revhistory>
  </bookinfo>
  <chapter>
    <title>Overview</title>
    <section>
      <title>What is ocaml-gettext ?</title>
      <para>
        Ocaml-gettext is a library to support string translation in OCaml. It provides a simple interface 
        to help programmer's and translator to create programs that can support different languages. This
        permits the internationalization of programs.
      </para>
      <para>
        OCaml-gettext provides two main functionnalities : 
        <itemizedlist>
          <listitem>
            <para>
              translate english strings to localized strings ( depending on which gettext data are installed ),
            </para>
          </listitem>
          <listitem>
            <para>
              convert charset from the one used by the translator to the charset of the user.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>The library is build according to three point of view :
        <itemizedlist>
          <listitem>
            <para>
              programmer : this library provides functions that can be used in OCaml,
            </para>
          </listitem>
          <listitem>
            <para>
              translator : this library provides a standard file format ( PO file ) to help translator,
            </para>
          </listitem>
          <listitem>
            <para>
              user : this library provides a set of command line options to set the language 
              and the charset.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        Ocaml-gettext was initially only a wrapper of gettext. It comes with a patch against the source of
        xgettext to add support of the OCaml language. After having experienced a bit with this approach, 
        i was convinced that this library should be better integrated by using more advanced features of 
        OCaml ( such as <command>camlp4</command> ). 
      </para>
      <para>
        As a result of the effort of porting gettext to ocaml-gettext, we have :
        <itemizedlist>
          <listitem>
            <para>
              a library that could understand the native format of gettext file ( MO file ),
            </para>
          </listitem>
          <listitem>
            <para>
              two implementation : a wrapper around gettext and a pure OCaml implementation using 
              camomile,
            </para>
          </listitem>
          <listitem>
            <para>
              <command>ocaml-gettext</command> : a command line tool to help you extract, merge and install
              gettext data.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <section>
      <title>How is ocaml-gettext related to gettext ?</title>
      <para>
        Ocaml-gettext is the nearby cousin of gettext. In fact, the API is based on gettext. Everything 
        in ocaml-gettext is compatible with gettext :
        <itemizedlist>
          <listitem>
            <para>the function provided in the API are very near to the gettext one,</para>
          </listitem>
          <listitem>
            <para>the library contains a binding of the gettext library,</para>
          </listitem>
          <listitem>
            <para>
              all the file outputed are gettext compatible : the library use PO file for translator 
              and MO file for translation,
            </para>
          </listitem>
          <listitem>
            <para>
              the library try to use the same initialization sequence as gettext :
              it uses the same environment variable, try to find MO file in the
              same place...
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        This documentation will not covered the point that are better explained in the 
        <link linkend="gettext-documentation">gettext documentation</link>. It is highly recommended 
        to read this documentation, before reading this manual. Most point that are explained there 
        are not explained again here. However, we have tried to be as precise as possible to enable 
        programming with ocaml-gettext without having the need to be a gettext expert.
      </para>
    </section>
  </chapter>
  <chapter>
    <title>Installing ocaml-gettext</title>
    <section>
      <title>Using source</title>
      <para>For compiling ocaml-gettext, you need to download all the
        prerequisite :
        <itemizedlist>
          <!-- BUG: complete the right URL -->
          <listitem>
            <para>
              <ulink url="&download-ocaml;">OCaml</ulink> v3.08.3 or later,
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="&download-findlib;">findlib</ulink> v1.0.4 or later,
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="&download-ocaml-fileutils;">ocaml-fileutils</ulink> v0.3.0 or later,
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="&download-camomile;">camomile</ulink> v0.6.0 or later,
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="&download-gettext;">gettext</ulink> v0.14.3 or later,
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="&download-ounit;">OUnit</ulink> v1.0.1 or later
              <footnote id="build-test"><para>Only if you want to build unitary test tool</para></footnote>,
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="&download-ocaml-benchmark;">ocaml-benchmark</ulink> v0.6 or later 
              <footnote id="build-benchmark"><para>Only if you want to build benchmarking tool</para></footnote>,
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="&download-docbook;">Docbook DTD and stylesheets</ulink> v4.3
              <footnote id="build-doc"><para>Only if you want to build the documentation</para></footnote>,
            </para>
          </listitem>
           <listitem>
            <para>
              <ulink url="&download-xsltproc;">xsltproc</ulink> v1.1.12 or later 
              <footnoteref linkend="build-doc"/>,
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        Camomile and gettext are optional but you need at least one of them in order to be able to build 
        the command line tool <command>ocaml-getttext</command>. 
      </para>
      <para>
        After having build and install all the prerequisite, extract the source
        code of ocaml-gettext to a directory. Go to the source directory and type :
        <itemizedlist>
          <listitem>
            <para>
              <command>./configure</command>
              <footnote>
                <para>
                  If needed, you can use <command>./configure <option>--help</option></command> 
                  to have a complete help on the different option you can use to tweak the 
                  installation of ocaml-gettext.
                </para>
              </footnote>
            </para>
          </listitem>
          <listitem>
            <para>
              <command>make</command>
            </para>
          </listitem>
          <listitem>
            <para>
              <command>make install</command>
            </para>
          </listitem>
          <listitem>
            <para>
              <command>make doc</command><footnoteref linkend="build-doc"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <command>cd test</command>
            </para>
          </listitem>
          <listitem>
            <para>
              <command>make</command>
            </para>
          </listitem>
          <listitem>
            <para>
              <command>./test</command>
              <footnoteref linkend="build-test"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <command>./benchmark</command>
              <footnoteref linkend="build-benchmark"/>
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        Since ocaml-gettext is not yet a stable relase, building the benchmark and the unitary test tools
        is important, especially for debugging purpose. If you encouter problems, you should first
        try to run this two command. They will give you good hints on what cause the problem.
      </para>
    </section>
    <section>
      <title>Debian distribution</title>
      <para>
        <!-- Debian package -->
        A debian package is available in the official Debian archive ( release &quot;unstable&quot;,
        &quot;main&quot; section ). 
      </para>
      <para>
        To install it, use the command :
        <command>apt-get 
          <option>install</option> <varname>libgettext-ocaml-dev</varname>
        </command>.
      </para>
    </section>
    <section>
      <title>Other distribution</title>
      <para>
        Actually, there is no plan to release packages for other distribution. If you have any skill
        concerning the packaging of ocaml-gettext for any other distribution, please contact me.
      </para>
    </section>
  </chapter>
  <chapter>
    <title>Programming with ocaml-gettext</title>
    <section>
      <title>Overview</title>
      <para>
        The API of ocaml-gettext is really reduced. It is made on purpose. The design is heavily
        based on modules and functor. There is no real reason for this design, it was just 
        really useful at the time the code was written.
      </para>
      <para>
        The library suppose that all the <varname>textdomain</varname> that will be used during 
        translation, are declared before using it. It is a real constraint, but it is permits more
        optimisation. Moreover, this permits to have a more &quot;functional&quot; use. 
      </para>
      <para>
        <!-- Description of the parameter t -->
        First of all, a paramater <varname>t</varname> should be defined. This parameter holds 
        all the required value to initialize ocaml-gettext. In particular, it contains information 
        about :
        <itemizedlist>
          <listitem>
            <para>
              which textdomains will be used,
            </para>
          </listitem>
          <listitem>
            <para>
              which language to use,
            </para>
          </listitem>
          <listitem>
            <para>
              how the error should be handle,
            </para>
          </listitem>
          <listitem>
            <para>
              which directory to search.
            </para>
          </listitem>
        </itemizedlist>
        This parameters is build and updated through internal functions. You don't have direct access
        to it.
      </para>
      <para>
        <!-- Description of the parameter t' -->
        The parameter <varname>t</varname> is not directly used for translation. It must be converted to
        a parameter <varname>t'</varname> which is a real function to access translation. The transformation
        from <varname>t</varname> to <varname>t'</varname> is handle through a function 
        <varname>realize</varname>. The parameter <varname>t'</varname> is used in low level translation.
      </para>
      <para>
        <!-- Description of the function realize -->
        All the work of the library is done in the function <varname>realize</varname>. This function is
        not provided in the base package. It is build out of real implementation of ocaml-gettext ( such as
        <varname>gettext-camomile</varname> or <varname>gettext-stub</varname> ). This function could handle
        all the parameters in different way. Concerning <varname>gettext-camomile</varname>, it build a 
        translation table for all the file found which correspond to a declared domain.
      </para>
      <para>
        <!-- Justification of the global variable -->
        Since, it should be very hard to pass a parameter <varname>t</varname> or <varname>t'</varname> in 
        all the function that should use translation, we provide a more simple way to use the library. The 
        toplevel function use a global reference to store the parameters <varname>t</varname> and 
        <varname>t'</varname>. This helps to integrate ocaml-gettext more easily into existing application.
      </para>
    </section>
    <section>
      <title>Makefile and source layout</title>
      <!-- PO -->
      <para>
        The source layout should conform to the one described in 
        <link linkend="gettext-documentation">gettext documentation</link>. In particular, it should 
        contains a <filename>po</filename> directory. There should be in this directory : 
        <itemizedlist>
          <listitem>
            <para>
              a file <filename>LINGUAS</filename> describing all the translation available,
            </para>
          </listitem>
          <listitem>
            <para>
              a file <filename>POTFILES</filename> containing the listing of all file that should
              contains translatable strings,
            </para>
          </listitem>
          <listitem>
            <para>
              a <filename>Makefile</filename> to build the whole things,
            </para>
          </listitem>
          <listitem>
            <para>
              a set of PO file which contains translated strings for different file.
            </para>
          </listitem>
        </itemizedlist>
        During the build, the <filename>Makefile</filename> should generate a file 
        <filename>your-domain.pot</filename> that contains a template PO file, that can be used
        by translator.
      </para>
      <example>
        <title><filename>Makefile</filename> for <filename>po</filename></title>
        <programlisting>&po-makefile;</programlisting>
      </example>
      <example>
        <title><filename>LINGUAS</filename></title>
        <programlisting>&LINGUAS;</programlisting>
      </example>
      <example>
        <title><filename>POTFILES</filename></title>
        <programlisting>&POTFILES;</programlisting>
      </example>
      <!-- Source -->
      <para>
        For building programs and library with ocaml-gettext, the prefer way is to use ocamlfind. 
        There is five findlib package : 
        <itemizedlist>
          <listitem>
            <para>
              gettext.base : the base package of ocaml-gettext. It contains the toplevel type
              required to compile any library,
            </para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <listitem>
            <para>
              gettext.extension
              <footnote id="advanced-features">
                <para>
                  This feature is described here only for your information. Since it belongs to 
                  low level implementation of ocaml-gettext, it should not be used.
                </para>
              </footnote> 
              : a package used to extend ocaml-gettext. It is reserved for very
              particular function ( such as creating a new <varname>realize</varname> function ),
            </para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <listitem>
            <para>
              gettext.extract<footnoteref linkend="advanced-features"/> : a package that permits 
              to create special <command>camlp4</command> program ( such as 
              <command>ocaml-xgettext</command> ),
            </para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <listitem>
            <para>
              gettext-stub : an implementation of ocaml-gettext using gettext,
            </para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <listitem>
            <para>
              gettext-camomile : an implementation of ocaml-gettext using camomile, it is a pure
              ocaml implementation.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        In order to link an application using ocaml-gettext, you should link with one of : gettext.base,
        gettext-camomile or gettext-stub.
      </para>
      <example>
        <title><filename>Makefile</filename></title>
        <programlisting>&makefile;</programlisting>
      </example>
    </section>
    <section>
      <title>Library</title>
      <para>
        Library should be based on the toplevel module <varname>Gettext.Library</varname>. It doesn't need any real implementation 
        of ocaml-gettext. This way you can let the library user choose the most appropriate ocaml-gettext 
        implementation. This point is essential : a library could be used as well in a GUI program or in short run
        command line program ( <command>ls</command> for example ). This two example doesn't require at all the
        same kind of implementation : GUI program load most of their translated string, command line program
        only use one of them. So by using the toplevel <varname>Gettext.Library</varname> framework, you don't restrict programs
        to use one particular implementation of ocaml-gettext.
      </para>
      <para>
        The library should define using the functor <varname>Init</varname> provided: 
        <itemizedlist>
          <listitem>
            <para>
              his textdomain through the <varname>textdomain</varname> value,
            </para>
          </listitem>
          <listitem>
            <para>
              his dependencies through the <varname>dependencies</varname> value,
            </para>
          </listitem>
          <listitem>
            <para>
              if needed his codeset and dir binding ( but it is not recommended to do so ).
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        After having instanciated the module <varname>Gettext.Library</varname> with the approriate <varname>Init</varname>, 
        you should use the function provided : 
        <itemizedlist>
          <listitem>
            <para>
              <varname>s_</varname> : for translating singular strings,
            </para>
          </listitem>
          <listitem>
            <para>
              <varname>f_</varname> : for translating singular strings which will be used with <varname>Printf</varname> 
              function
              <footnote id="printf-strings">
                <para>
                  Strings which should be used by <varname>Printf</varname> function are checked to be sure
                  that the returned strings are equivalent to the provided english string. In particular, every 
                  &quot;%&quot;-symbol should be the same in the provided string and the returned strings. If not,
                  it is the untranslated string which is returned.
                </para>
              </footnote>,
            </para>
          </listitem>
          <listitem>
            <para>
              <varname>sn_</varname> : for translating plural strings,
            </para>
          </listitem>
          <listitem>
            <para>
              <varname>fn_</varname> : for translating plural strings which will be used with <varname>Printf</varname>
              function<footnoteref linked="printf-strings"/>,
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <warning>
        You must keep the function name <varname>s_</varname>, <varname>f_</varname>, <varname>sn_</varname> and <varname>fn_</varname>.
        The extraction of translatable strings are based on these names. If you don't keep it, the extraction of translatable strings
        will fail.
      </warning>
      <example>
        <title><filename>library.ml</filename></title>
        <programlisting>
          &library-ml;
        </programlisting>
      </example>
      <example>
        <title><filename>libraryGettext.ml</filename></title>
        <programlisting>
          &library-gettext-ml;
        </programlisting>
      </example>
      <para>
        All the calls to the translation function, use the textdomain provided in <varname>Init</varname>.
      </para>
      <para>
        The only constraint when using ocaml-gettext in your library is to provide an access to the value 
        <varname>Gettext.Library.init</varname>. This value is used as dependencies for other libraries and
        programs that depend on it. For example, since you use the library ocaml-gettext, your primary dependency
        is the function <varname>init</varname> provided in the toplevel ( the function <varname>string_of_exception</varname>
        is localized ).
      </para>
      <warning>
        If you distribute your library, don't forget to mention that ocaml-gettext will only be able to translate
        the string defined in your library, if and only if the MO file provided is also installed. If not installed
        ocaml-gettext is useless.
      </warning>
    </section>
    <section>
      <title>Program</title>
      <para>
        Program should used ocaml-gettext just as libraries does. The only difference lies in the fact that you should provide 
        a <varname>realize</varname> function in the <varname>InitProgram</varname>. The other difference is that the 
        <varname>init</varname> value is not a dependency that should be used by other program. It is a <varname>Arg</varname>
        usable value. It allows user to define some important parameters. 
      </para>
      <example>
        <title><filename>program.ml</filename></title>
        <programlisting>
          &program-ml;
        </programlisting>
      </example>
      <example>
        <title><filename>programGettext.ml</filename></title>
        <programlisting>
          &program-gettext-ml;
        </programlisting>
      </example>
      <example>
        <title>Output of <command>program <option>--help</option></command></title>
        <screen>
          <prompt>$></prompt><command>./program <option>--help</option></command>
          <computeroutput>
              --gettext-failsafe {ignore|inform-stderr|raise-exception}  
                                                  Choose how to handle failure in ocaml-gettext. Default: ignore.
              --gettext-disable                   Disable the translation perform by ocaml-gettext. Default: enable.
              --gettext-domain-dir textdomain dir Set a dir to search ocaml-gettext files for the specified domain. Default: [  ].
              --gettext-dir dir                   Add a search dir for ocaml-gettext files. Default: [ "/usr/share/locale"; 
                                                  "/usr/local/share/locale" ].
              --gettext-language language         Set the default language for ocaml-gettext. Default: (none).
              --gettext-codeset codeset           Set the default codeset for outputting string with ocaml-gettext. Default: ISO-8859-1.
              -help                               Display this list of options
              --help                              Display this list of options
          </computeroutput>
        </screen>
      </example>
      <para>
        If you want to include a manpage ( or info file ), that describe the command line option of ocaml-gettext, you should use the Docbook 
        XML fragment distributed with this application. Docbook should be enough generic to allow you to link it into your documentation 
        ( how to this is left as an exercise to the reader ). If you don't want to link it with your documentation, you can refer to 
        <link linkend="ocaml-gettext-options">ocaml-gettext-options manpage</link>.
      </para>
      <para>
        You should take care of what implementation of ocaml-gettext you are using. In order to choose the right implementation
        you should consider your program and every characteristic of it ( how many strings does he need to fetch ? Does it use already
        a C library which link with gettext ? ).
        <table>
          <title>Characteristics of ocaml-gettext implementation.</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Implementation</entry>
                <entry>Characteristics</entry>
                <entry>Usage</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>GettextCamomile.Map</entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        Pure OCaml implementation,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Full load of all MO files before any translation,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Use OCaml standard <varname>Map</varname>.
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        Pure OCaml program,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Program that require to translate a lot of strings,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Threaded program ( since it use OCaml Map, it should be thread safe without
                        problem ).
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
              </row>
              <row>
                <entry>GettextCamomile.Hashtbl</entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        Pure OCaml implementation,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Full load of all MO file before any translation,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Use OCaml standard <varname>Hashtbl</varname>.
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        Pure OCaml program,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Program that requires to translate a lot of strings,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Should work with threaded program, provided that the <varname>Hashtbl</varname> 
                        work in threaded environment.
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
              </row>
              <row>
                <entry>GettextCamomile.Open</entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        Pure OCaml implementation,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Load strings from MO when needed,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Use OCaml standard <varname>Hashtbl</varname>,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Use a dichotomic search for the strings,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Compute MO file to open at initialization,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Open a file when fetching string,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Doesn't memorize already translated strings,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Implementation design copied from gettext.
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        Pure OCaml program,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Program that require to translate very few strings,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Should work with threaded program, provided that <varname>open_in</varname> function call
                        work.
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
              </row>
              <row>
                <entry>GettextStub.Native</entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        Native gettext library,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Partial load of all MO file before any translation, use <varname>mmap</varname>.
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        OCaml program that use library compile with gettext,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Should work with threaded program, provided that the <varname>gettext</varname> 
                        work in threaded environment.
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
              </row>
              <row>
                <entry>GettextStub.Preload</entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        Native gettext library,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Forced load of all MO file before any translation, the preload is realized by trying to load
                        the string &quot;&quot; for all the textdomain defined.
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        OCaml program that use library compile with gettext,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Program that needs to translate a lot of strings,
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Should work with threaded program, provided that the <varname>gettext</varname> 
                        work in threaded environment.
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
    </section>
    <section>
      <title>Graphical user interface</title>
      <para>
        Graphical user interface works just as program or library. The only difference is that the file which contains
        the graphical user interface is not coded in OCaml. You have two choices :
        <itemizedlist>
          <listitem>
            <para>
              Extract the string from the original GUI file,
            </para>
          </listitem>
          <listitem>
            <para>
              Extract the string from the coded generated using the GUI file.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        You should use the first alternative : it is more easy for a translator to extract strings, without having to compile
        your application ( it permits translators that don't know OCaml to help you ). In order to do so, you should use the native
        <command>xgettext</command> binary ( provided with gettext ). It should support the format of the translatable strings found
        in you GUI file ( for example, <command>xgettext</command> supports glade file ).
      </para>
      <para>
        But, for now you can only use the second alternative, because OCaml is not yet supported in <command>xgettext</command>. This
        should be fixed, once <command>ocaml-gettext</command> will be enough stable to become a backend for <command>xgettext</command>.
      </para>
      <para>
        In the two case, you just have to add your GUI file ( in OCaml or native form ) to <filename>POTFILES</filename>.
      </para>
    </section>
  </chapter>
  <chapter>
    <title>Translating ocaml-gettext programs and libraries</title>
    <para>
      Ocaml-gettext has been build around gettext. This allows translators to use exactly the same technics as they should
      use with gettext. All the documentation required for translating can be found in <link linkend="gettext-documentation">
      gettext documentation</link>.
    </para>
    <para>
      It is recommended to use GUI which allow more easy translation such as : 
      <itemizedlist>
        <listitem>
          <para>
            <ulink url="&site-gtranslator;">gtranslator</ulink>,
          </para>
        </listitem>
        <listitem>
          <para>
            <ulink url="&site-kbabel;">kbabel</ulink>.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </chapter>
  <chapter>
    <title>Using ocaml-gettext programs</title>
    <para>
      Ocaml-gettext program can be used just as any OCaml program. The only difference with standard OCaml program is that
      they come with a bunch of command line option which are specific to OCaml program. In most case, you just have to defined
      a well suited <varname>LC_ALL</varname> or <varname>LANG</varname> environment variable. Since ocaml-gettext is compatible
      with gettext, if your environment variable works with gettext, it should also works with ocaml-gettext.
    </para>
    <para>
      You can find more details in the <link linkend="gettext-documentation">gettext documentation</link> or in the <link 
      linkend="ocaml-gettext-options">ocaml-gettext-options manpage</link>.
    </para>
  </chapter>
  <appendix>
    <title>Links</title>
    <itemizedlist>
      <listitem>
        <para>
          <ulink url="&site-ocaml;">OCaml website</ulink>
        </para>
      </listitem>
      <listitem>
        <para>
          <ulink url="&site-gettext;">Gettext website</ulink>
        </para>
      </listitem>
      <listitem id="gettext-documentation">
        <para>
          <ulink url="&site-documentation-gettext;">Gettext documentation</ulink>
        </para>
      </listitem>
      <listitem>
        <para>
          <ulink url="&site-camomile;">Camomile website</ulink>
        </para>
      </listitem>
      <listitem>
        <para>
          <ulink url="&site-ocaml-fileutils;">Ocaml-fileutils website</ulink>
        </para>
      </listitem>
      <listitem>
        <para>
          <ulink url="&site-ounit;">OUnit website</ulink>
        </para>
      </listitem>
      <listitem>
        <para>
          <ulink url="&site-ocaml-benchmark;">Ocaml-benchmark website</ulink>
        </para>
      </listitem>
      <listitem>
        <para>
          <ulink url="&site-docbook;">Docbook website</ulink>
        </para>
      </listitem>
    </itemizedlist>
  </appendix>
  <appendix>
    <title>Manpages</title>
    <refentry>
      <refmeta>
        <refentrytitle>OCAML-GETTEXT</refentrytitle>
        <manvolnum>1</manvolnum>
      </refmeta>
      
      <refnamediv>
        <refname><command>ocaml-gettext</command> and <command>ocaml-xgettext</command></refname>
        <refpurpose>programs to manage PO and MO file for OCaml source file.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
        <cmdsynopsis>
          <command>ocaml-xgettext</command>
          <arg>camlp4 arguments</arg>
          <arg><replaceable>filename</replaceable></arg>
        </cmdsynopsis>
        <cmdsynopsis>
          <command>ocaml-gettext</command>
          <group>
            <arg choice="plain">--version</arg>
            <arg choice="plain">--short-version</arg>
            <arg choice="plain">-help</arg>
            <arg choice="plain">--help</arg>
            <sbr/>
            <arg choice="req">--action 
              <group>
                <sbr/>
                <arg choice="plain">extract
                  <arg choice="opt">--extract-command         <arg choice="req"><replaceable>cmd</replaceable></arg></arg>
                  <arg choice="opt">--extract-default-option  <arg choice="req"><replaceable>options</replaceable></arg></arg>
                  <arg choice="opt">--extract-filename-option <arg choice="req"><replaceable>filename</replaceable></arg>
                                                              <arg choice="req"><replaceable>options</replaceable></arg></arg>
                  <arg choice="opt">--extract-pot             <arg choice="req"><replaceable>filename</replaceable></arg></arg>
                </arg>
                <sbr/>
                <arg choice="plain">compile
                  <arg choice="opt">--compile-output          <arg choice="req"><replaceable>filename</replaceable></arg></arg>
                </arg>
                <sbr/>
                <arg choice="plain">install
                  <arg choice="opt">--install-language        <arg choice="req"><replaceable>language</replaceable></arg></arg>
                  <arg choice="opt">--install-category        <arg choice="req"><replaceable>category</replaceable></arg></arg>
                  <arg choice="opt">--install-textdomain      <arg choice="req"><replaceable>textdomain</replaceable></arg></arg>
                  <arg choice="opt">--install-destdir         <arg choice="req"><replaceable>dirname</replaceable></arg></arg>
                </arg>
                <sbr/>
                <arg choice="plain">uninstall
                  <arg choice="opt">--uninstall-language      <arg choice="req"><replaceable>language</replaceable></arg></arg>
                  <arg choice="opt">--uninstall-category      <arg choice="req"><replaceable>category</replaceable></arg></arg>
                  <arg choice="opt">--uninstall-textdomain    <arg choice="req"><replaceable>textdomain</replaceable></arg></arg>
                  <arg choice="opt">--uninstall-orgdir        <arg choice="req"><replaceable>dirname</replaceable></arg></arg>
                </arg>
                <sbr/>
                <arg choice="plain">merge
                  <arg choice="req">--merge-pot               <arg choice="req"><replaceable>filename</replaceable></arg></arg>
                  <arg choice="opt">--merge-backup-extension  <arg choice="req"><replaceable>extension</replaceable></arg></arg>
                </arg>
              </group>
            </arg>
          </group>
          <sbr/>
          <arg rep="repeat">file</arg>
        </cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
        <title>DESCRIPTION</title>

        <para>
          This manual page documents briefly the <command>ocaml-gettext</command> and <command>ocaml-xgettext</command> command.
        </para>

        <para>
          <command>ocaml-xgettext</command> is a <command>camlp4</command> toplevel. This toplevel is compiled with the 
          printer module <filename>pr_gettext.cmo</filename>. It outputs an OCaml marshalled data structure that can only
          be understood by <command>ocaml-gettext</command>. The purpose of this program is to be a backend for OCaml source
          code string extraction. You should not use it directly.
        </para>
        <variablelist>
          <varlistentry>
            <term>
              <arg choice="plain">--action</arg> 
              <group>
                <arg choice="plain">extract</arg>
                <arg choice="plain">compile</arg>
                <arg choice="plain">install</arg>
                <arg choice="plain">uninstall</arg>
                <arg choice="plain">merge</arg>
              </group>
            </term> 
            <listitem>
              <para>
                Action to execute :
                <itemizedlist>
                  <listitem>
                    <para>
                      <arg choice="plain">extract</arg> : all the file are considered to be OCaml source file and translatable strings
                      are searched inside. The output of the command is a POT file. As a special case, if a file named 
                      <filename>POTFILES</filename> is in the list of the file to search, the file is not searched but all
                      the lines of this files are considered to be filename of file to search.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <arg choice="plain">compile</arg> : all the file listed are considered to be PO file. The file are compiled in binary
                      MO file,
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <arg choice="plain">install</arg> : all the file listed are considered to be MO file. They are installed in their
                      respective directory considering language, textdomain and category,
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <arg choice="plain">uninstall</arg> : symetric command to install, but it uninstall the file found for the considered
                      language, textdomain, category and filenames,
                    </para>
                  </listitem>
                  <listitem>
                    <arg choice="plain">merge</arg> : merge a POT file with a PO file.
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--extract-command <arg choice="req"><replaceable>cmd</replaceable></arg></arg></term>
            <listitem>
              <para>
                Command to extract translatable strings from an OCaml source file. This command should output
                the same marshalled structure as <command>ocaml-xgettext</command>. The best is to use the same
                build version of <command>ocaml-gettext</command>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--extract-default-option <arg choice="req"><replaceable>options</replaceable></arg></arg></term>
            <listitem>
              <para>
                Default option used when extracting translatable strings. This option is a <command>camlp4</command> option and 
                will be passed to <command>ocaml-xgettext</command> when processing all the file that don't have a specific 
                <command>camlp4</command> option.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--extract-filename-option 
                <arg choice="req"><replaceable>filename</replaceable></arg>
                <arg choice="req"><replaceable>options</replaceable></arg></arg>
            </term>
            <listitem>
              <para>
                Per filename <command>camlp4</command>option. It is used when extracting strings from the specified filename. It
                overrides default <command>camlp4</command> options.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--extract-pot <arg choice="req"><replaceable>filename</replaceable></arg></arg></term>
            <listitem>
              <para>
                POT file to write when extracting translatable strings.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--compile-output <arg choice="req"><replaceable>filename</replaceable></arg></arg></term>
            <listitem>
              <para>
                MO file to write when compiling a PO file. If not provided, the output will be the name of the PO file with 
                &quot;.mo&quot; extension.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--install-language <arg choice="req"><replaceable>language</replaceable></arg></arg></term>
            <listitem>
              <para>
                Language to use when installing a MO file.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--install-category <arg choice="req"><replaceable>category</replaceable></arg></arg></term>
            <listitem>
              <para>
                Category to use when installing a MO file.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--install-textdomain <arg choice="req"><replaceable>textdomain</replaceable></arg></arg></term>
            <listitem>
              <para>
                Textdomain to use when installing a MO file.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--install-destdir <arg choice="req"><replaceable>dirname</replaceable></arg></arg></term>
            <listitem>
              <para>
                Base dir used when installing a MO file.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--uninstall-language <arg choice="req"><replaceable>language</replaceable></arg></arg></term>
            <listitem>
              <para>
                Language to use when uninstalling a MO file.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--uninstall-category <arg choice="req"><replaceable>category</replaceable></arg></arg></term>
            <listitem>
              <para>
                Category to use when uninstalling a MO file.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--uninstall-textdomain <arg choice="req"><replaceable>textdomain</replaceable></arg></arg></term>
            <listitem>
              <para>
                Textdomain to use when uninstalling a MO file.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--uninstall-orgdir <arg choice="req"><replaceable>dirname</replaceable></arg></arg></term>
            <listitem>
              <para>
                Base dir used when uninstalling a MO file.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--merge-pot <arg choice="req"><replaceable>filename</replaceable></arg></arg></term>
            <listitem>
              <para>
                POT file to use as a master for merging PO file.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--merge-backup-extension <arg choice="req"><replaceable>extension</replaceable></arg></arg></term>
            <listitem>
              <para>
                Backup extension to use when moving PO file which have been merged.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--version</arg></term>
            <listitem>
              <para>
                Returns version information on ocaml-gettext.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><arg choice="plain">--short-version</arg></term>
            <listitem>
              <para>
                Returns only the version string of ocaml-gettext. The return is made to be easily parseable by <command>configure</command>
                script. The output of this command will always stay as the shortest version string, made of numeric characters ( 0-9 ) and 
                &quot;.&quot;. The version strings should be compared considering that a version A is greater than a version B if there is a 
                number between two &quot;.&quot; of A is greater than B beginning at the right of the string. For example: 0.14 is greater 
                than 0.13.1.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><group><arg choice="plain">-help</arg><arg choice="plain">--help</arg></group></term>
            <listitem>
              <para>
                Display the help about the <command>ocaml-gettext</command> command.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>NOTES</title>
        <para>
          XXX : describes the mechanism for guessing things in install/uninstall.
        </para>
      </refsect1>
      <refsect1>
        <title>SEE ALSO</title>
      
        <para>ocaml-gettext-options <manvolnum>1</manvolnum></para>
      </refsect1>
    </refentry>
    <para id="ocaml-gettext-options">
    --gettext-failsafe {ignore|inform-stderr|raise-exception}  Choose how to handle failure in ocaml-gettext.
    --gettext-disable                  Disable the translation perform by ocaml-gettext.
    --gettext-domain-dir textdomain    dir Set a dir to search ocaml-gettext files for the specified domain.
    --gettext-dir dir                  Add a search dir for ocaml-gettext files.
    --gettext-language language        Set the default language for ocaml-gettext.
    --gettext-codeset codeset          Set the default codeset for outputting string with ocaml-gettext.
    </para>
  </appendix>
</book>
