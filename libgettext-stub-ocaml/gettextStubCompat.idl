/**************************************************************************/
/*  Ocaml-gettext : a library to translate messages                       */
/*                                                                        */
/*  Copyright (C) 2003, 2004, 2005 Sylvain Le Gall <sylvain@le-gall.net>  */
/*                                                                        */
/*  This library is free software; you can redistribute it and/or         */
/*  modify it under the terms of the GNU Lesser General Public            */
/*  License as published by the Free Software Foundation; either          */
/*  version 2.1 of the License, or (at your option) any later version;    */
/*  with the OCaml static compilation exception.                          */
/*                                                                        */
/*  This library is distributed in the hope that it will be useful,       */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     */
/*  Lesser General Public License for more details.                       */
/*                                                                        */
/*  You should have received a copy of the GNU Lesser General Public      */
/*  License along with this library; if not, write to the Free Software   */
/*  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307   */
/*  USA                                                                   */
/*                                                                        */
/*  Contact: sylvain@le-gall.net                                          */
/**************************************************************************/

/***************************/
/*                         */
/*                         */
/*  Function from locale   */
/*                         */
/*                         */
/***************************/

quote(c, "#include <locale.h>");

enum lc {
  LC_CTYPE,
  LC_NUMERIC,
  LC_TIME,
  LC_COLLATE,
  LC_MONETARY,
  LC_MESSAGES,
  LC_ALL
};

quote(mli, "(** Set the current localization for the category *)");
[string]char *setlocale( 
    enum lc n, 
    [string]const char *val)
quote(call, 
    "_res=setlocale(n,val);\
    if ( _res == NULL )\
    failwith(\"setlocale(invalid localization)\");\
    ");

/***************************/
/*                         */
/*                         */
/*  Function from libintl  */
/*                         */
/*                         */
/***************************/

quote(c, "#include <libintl.h>");

quote(mli, "(** Look up MSGID in the current default message \
catalog for the current LC_MESSAGES locale.  If not found, \
returns MSGID itself (the default text).  *)");

[string]char *gettext (
    [string]const char *msgid);

quote(mli, "(** Look up MSGID in the DOMAINNAME message catalog \
for the current LC_MESSAGES locale.  *)");

[string]char *dgettext (
    [string]const char *domainname, 
    [string]const char *msgid);

quote(mli, "(** Look up MSGID in the DOMAINNAME message catalog \
for the current CATEGORY locale.  *)");

[string]char *dcgettext (
    [string]const char *domainname, 
    [string]const char *msgid, 
    enum lc category);

quote(mli, "(** Similar to `gettext' but select the plural form \
corresponding to the number N.  *)");

[string]char *ngettext (
    [string]const char *msgid1, 
    [string]const char *msgid2, 
    unsigned long int n);

quote(mli, "(** Similar to `dgettext' but select the plural form \
corresponding to the number N.  *)");

[string]char *dngettext (
    [string]const char *domainname, 
    [string]const char *msgid1, 
    [string]const char *msgid2, 
    unsigned long int n);

quote(mli, "(** Similar to `dcgettext' but select the plural form \
corresponding to the number N.  *)");

[string]char *dcngettext (
    [string]const char *domainname, 
    [string]const char *msgid1, 
    [string]const char *msgid2, 
    unsigned long int n, 
    enum lc category);

quote(mli, "(** Set the current default message catalog to DOMAINNAME.\
 If DOMAINNAME is \"\", reset to the default of \"messages\". *)");

[string]char *textdomain ( 
    [string]const char *domainname) 
quote(call, 
    "_res=textdomain(domainname);\
    if ( _res == NULL )\
    failwith(\"textdomain\");\
    ");

quote(mli, "(** Get the current default message catalog to DOMAINNAME.*)");

[string]char *get_textdomain ( 
    void)
quote(call, 
    "_res=textdomain(NULL);\
    if ( _res == NULL )\
    failwith(\"get_textdomain\");\
    ");

quote(mli, "(** Specify that the DOMAINNAME message catalog will be found\
   in DIRNAME rather than in the system locale data base.  *)");

[string]char *bindtextdomain (
    [string]const char *domainname, 
    [string]const char *dirname)
quote(call, 
    "_res=bindtextdomain(domainname, dirname);\
    if ( _res == NULL )\
    failwith(\"bindtextdomain\");\
    ");

quote(mli, "(** Specify the character encoding in which the messages from the\
   DOMAINNAME message catalog will be returned.*)");

[string]char *bind_textdomain_codeset (
    [string]const char *domainname, 
    [string]const char *codeset)
quote(call, 
    "_res=bind_textdomain_codeset(domainname,codeset);\
    if ( _res == NULL )\
    failwith(\"bind_textdomain_codeset\");\
    ");
